{"ast":null,"code":"// api.ts\nimport axios from \"axios\";\nconst BASE_URL = \"http://localhost:8080/api/flashcards\";\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport let ProgressStatus = /*#__PURE__*/function (ProgressStatus) {\n  ProgressStatus[\"ENABLED\"] = \"ENABLED\";\n  ProgressStatus[\"DISABLED\"] = \"DISABLED\";\n  return ProgressStatus;\n}({});\nexport let wordcardStatus = /*#__PURE__*/function (wordcardStatus) {\n  wordcardStatus[\"UNCHECKED\"] = \"UNCHECKED\";\n  wordcardStatus[\"CHECKED\"] = \"CHECKED\";\n  return wordcardStatus;\n}({});\n\n// export interface PersonalDeck {\n//   id: number\n// }\n// id 숫자로 받는지 ? string으로?? bigint로???\n//res. data[data,message,httpStatus]\n//userId -> header에 있어야,,\nexport const createPersonalDeck = data => {\n  return axiosInstance.post(\"/deck\", data);\n};\nexport const createWordcard = (deckId, data) => {\n  return axiosInstance.post(`/card/${deckId}`, data);\n};\nexport const getPersonalFlashcards = () => {\n  return axiosInstance.get(\"/personal\");\n};\nexport const getPublicFlashcards = () => {\n  return axiosInstance.get(\"/list\");\n};\nexport const getOneDeck = deckId => {\n  return axiosInstance.get(`/deck/${deckId}`);\n};","map":{"version":3,"names":["axios","BASE_URL","axiosInstance","create","baseURL","headers","ProgressStatus","wordcardStatus","createPersonalDeck","data","post","createWordcard","deckId","getPersonalFlashcards","get","getPublicFlashcards","getOneDeck"],"sources":["/Users/limzzum/ssafyProject/S09P31A501/frontend/src/api/VocabListAPI/FlashcardsAPI.tsx"],"sourcesContent":["// api.ts\nimport axios, { AxiosResponse } from \"axios\"\nimport { CreateFlashcardsRequestDto, PrivacyStatus } from \"../../components/VocabListComponents/CreateNewListModal\"\nimport { CreateWordcardRequestDto } from \"../../pages/VocabListPage/DeckDetailPage\" \nconst BASE_URL = \"http://localhost:8080/api/flashcards\"\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\nexport enum ProgressStatus{\n    ENABLED = \"ENABLED\",\n    DISABLED = \"DISABLED\",\n}\nexport enum wordcardStatus{\n    UNCHECKED = \"UNCHECKED\",\n    CHECKED = \"CHECKED\",\n}\nexport interface ResponseDto<T> {\n  data: T,\n  message: string,\n  httpStatus: string,\n}\n\nexport interface WordcardDto {\n  id: number,\n  kor: string,\n  eng: string,\n  wordcardStatus:wordcardStatus,\n}\n\nexport interface FlashcardDto {\n  wordcardList: WordcardDto[],\n}\n// export interface PersonalDeck {\n//   id: number\n// }\nexport interface PersonalDeckTitle {\n  id: number,\n  name: string,\n  nickname?: string,\n  wordCount: number,\n  forkCount?: number,\n}\nexport interface PersonalDeckResponse {\n  personalDeckList: PersonalDeckTitle[],\n}\n// id 숫자로 받는지 ? string으로?? bigint로???\nexport interface DeckDetailResponseDto extends DeckCreateResponseDto {\n  id: number,\n  name: string,\n  userId: number,\n  nickname: string,\n  flashcardDeckId: number,\n  flashcardDto: FlashcardDto,\n  status: PrivacyStatus,\n  savingProgressStatus:ProgressStatus,\n  wordCount?: number,\n  forkCount?: number,\n}\nexport interface DeckCreateResponseDto {\n    id: number,\n    name: string,\n    userId: number,\n    nickname: string,\n    flashcardDeckId: number,\n    status: PrivacyStatus,\n    savingProgressStatus:ProgressStatus,\n  }\n\n  export interface WordUpdateResponseDto{\n    wordcard: WordcardDto,\n\n  }\n//res. data[data,message,httpStatus]\n//userId -> header에 있어야,,\nexport const createPersonalDeck = (data?:CreateFlashcardsRequestDto): Promise<AxiosResponse<ResponseDto<DeckCreateResponseDto>>> => {\n    return axiosInstance.post(\"/deck\",data)\n}\nexport const createWordcard = (deckId:number,data?:CreateWordcardRequestDto): Promise<AxiosResponse<ResponseDto<WordUpdateResponseDto>>> => {\n    return axiosInstance.post(`/card/${deckId}`,data)\n}\nexport const getPersonalFlashcards = (): Promise<AxiosResponse<ResponseDto<PersonalDeckResponse>>> => {\n    return axiosInstance.get(\"/personal\")\n}\nexport const getPublicFlashcards = (): Promise<AxiosResponse<ResponseDto<PersonalDeckResponse>>> => {\n    return axiosInstance.get(\"/list\")\n}\nexport const getOneDeck = (deckId:number): Promise<AxiosResponse<ResponseDto<DeckDetailResponseDto>>> => {\n    return axiosInstance.get(`/deck/${deckId}`)\n}\n\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAyB,OAAO;AAG5C,MAAMC,QAAQ,GAAG,sCAAsC;AAEvD,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AACF,WAAYC,cAAc,0BAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;AAI1B,WAAYC,cAAc,0BAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;;AAoB1B;AACA;AACA;AAWA;AA2BA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAIC,IAAgC,IAAiE;EAChI,OAAOP,aAAa,CAACQ,IAAI,CAAC,OAAO,EAACD,IAAI,CAAC;AAC3C,CAAC;AACD,OAAO,MAAME,cAAc,GAAGA,CAACC,MAAa,EAACH,IAA8B,KAAiE;EACxI,OAAOP,aAAa,CAACQ,IAAI,CAAE,SAAQE,MAAO,EAAC,EAACH,IAAI,CAAC;AACrD,CAAC;AACD,OAAO,MAAMI,qBAAqB,GAAGA,CAAA,KAAiE;EAClG,OAAOX,aAAa,CAACY,GAAG,CAAC,WAAW,CAAC;AACzC,CAAC;AACD,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAiE;EAChG,OAAOb,aAAa,CAACY,GAAG,CAAC,OAAO,CAAC;AACrC,CAAC;AACD,OAAO,MAAME,UAAU,GAAIJ,MAAa,IAAiE;EACrG,OAAOV,aAAa,CAACY,GAAG,CAAE,SAAQF,MAAO,EAAC,CAAC;AAC/C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}